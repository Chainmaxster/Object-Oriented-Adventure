# Adventurer Game Classes

## Overview

This repository contains a set of JavaScript classes designed to model characters in an adventuring game. The main classes include `Character`, `Adventurer`, `Companion`, and a `AdventurerFactory` for generating adventurers. There are also specialized adventurer classes (`Fighter`, `Healer`, `Wizard`) that extend the `Adventurer` class.

## Class Descriptions

### Character Class
The `Character` class serves as the base class for all characters in the game.

- **Properties:**
  - `name`: The name of the character.
  - `health`: The health of the character, initialized to `Character.MAX_HEALTH`.
  - `inventory`: An array representing the character's inventory.

- **Static Properties:**
  - `MAX_HEALTH`: Maximum health for all characters, set to 100.

- **Methods:**
  - `roll()`: Simulates a dice roll for the character.
  - `static isValidHealth(health)`: Checks if a given health value is valid.

### Adventurer Class
The `Adventurer` class extends `Character` and represents adventurers with specific roles.

- **Properties:**
  - `role`: The role of the adventurer (must be one of the valid roles).
  - `level`: The level of the adventurer.
  - `experience`: The experience points of the adventurer.
  - `skills`: An array of skills the adventurer has learned.

- **Static Properties:**
  - `ROLES`: An array of valid roles (`"Fighter"`, `"Healer"`, `"Wizard"`).

- **Methods:**
  - `scout()`: Simulates the adventurer scouting ahead.
  - `gainExperience(points)`: Adds experience points and checks for level-up.
  - `checkLevelUp()`: Checks if the adventurer can level up.
  - `levelUp()`: Levels up the adventurer.
  - `learnSkill(skill)`: Adds a skill to the adventurer's skills array.
  - `useSkill(skill)`: Uses a skill if the adventurer has learned it.
  - `static listRoles()`: Lists all available roles.

### AdventurerFactory Class
The `AdventurerFactory` class generates adventurers with a specified role.

- **Properties:**
  - `role`: The role of adventurers generated by the factory.
  - `adventurers`: An array of generated adventurers.

- **Methods:**
  - `generate(name)`: Generates a new adventurer with the specified role and adds it to the `adventurers` array.
  - `findByIndex(index)`: Finds an adventurer by their index in the `adventurers` array.
  - `findByName(name)`: Finds an adventurer by their name.

### Specialized Adventurer Classes
The `Fighter`, `Healer`, and `Wizard` classes extend the `Adventurer` class and add role-specific properties and methods.

- **Fighter Class**
  - Property: `strength`
  - Method: `attack()`

- **Healer Class**
  - Property: `healingPower`
  - Method: `heal()`

- **Wizard Class**
  - Property: `mana`
  - Method: `castSpell()`

### Companion Class
The `Companion` class extends `Character` and represents companions that can assist adventurers.

- **Properties:**
  - `type`: The type of companion (e.g., animal, human).
  - `loyaltyLevel`: The loyalty level of the companion.

- **Methods:**
  - `increaseLoyalty(points)`: Increases the loyalty level by a given number of points.
  - `assist()`: Simulates the companion assisting in the adventure.
  - `bondWithAdventurer()`: Increases loyalty as the companion bonds with the adventurer.

## Example Usage

```javascript
// Create a factory for healers
const healerFactory = new AdventurerFactory("Healer");
const robin = healerFactory.generate("Robin");
robin.scout();
robin.gainExperience(150);
robin.learnSkill("Healing Touch");
robin.useSkill("Healing Touch");

// Create a factory for fighters
const fighterFactory = new AdventurerFactory("Fighter");
const arthur = fighterFactory.generate("Arthur");

// Create companions
const littleJohn = new Companion("Little John", "Human");
littleJohn.assist();
littleJohn.bondWithAdventurer();

const friarTuck = new Companion("Friar Tuck", "Human");
friarTuck.assist();
friarTuck.increaseLoyalty(20);

// List available roles for adventurers
console.log(`Available roles for Adventurer: ${Adventurer.listRoles()}`);